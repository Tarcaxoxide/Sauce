#include<Sauce/Storage/FileSystem/FAT.hpp>
#include<Sauce/Utility/Conversion.hpp>

namespace Sauce{
    namespace Storage{
        namespace FileSystem{
            namespace FAT{
                FAT32Driver_st::FAT32Driver_st(size_t Port){
                    this->Port=Port;
                    size_t CurrentByte=0;
                    for(size_t i=0;i<3;i++)Boot_Record.NOP[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    for(size_t i=0;i<8;i++)Boot_Record.OEM_IDENTIFIER[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    for(size_t i=0;i<2;i++)Boot_Record.NUMBER_OF_BYTES_PER_SECTOR[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    for(size_t i=0;i<1;i++)Boot_Record.NUMBER_OF_SECTORS_PER_CLUSTER[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    for(size_t i=0;i<2;i++)Boot_Record.NUMBER_OF_RESERVED_SECTORS[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    for(size_t i=0;i<1;i++)Boot_Record.NUMBER_OF_FATS[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    for(size_t i=0;i<2;i++)Boot_Record.NUMBER_OF_ROOT_DIRECTORY_ENTRIES[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    for(size_t i=0;i<2;i++)Boot_Record.TOTAL_SECTORS_IN_LOGICAL_VOLUME[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    for(size_t i=0;i<1;i++)Boot_Record.MEDIA_DESCRIPTOR_TYPE[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    for(size_t i=0;i<2;i++)Boot_Record.NUMBER_OF_SECTORS_PER_FAT_12[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    for(size_t i=0;i<2;i++)Boot_Record.NUMBER_OF_SECTORS_PER_TRACK[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    for(size_t i=0;i<2;i++)Boot_Record.NUMBER_OF_HEADS[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    for(size_t i=0;i<4;i++)Boot_Record.NUMBER_OF_HIDDEN_SECTORS[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    for(size_t i=0;i<4;i++)Boot_Record.LARGE_SECTOR_COUNT[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    for(size_t i=0;i<4;i++)Boot_Record.NUMBER_OF_SECTORS_PER_FAT_32[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    for(size_t i=0;i<2;i++)Boot_Record.FLAGS[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    for(size_t i=0;i<2;i++)Boot_Record.FAT_VERSION[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    for(size_t i=0;i<4;i++)Boot_Record.CLUSTER_NUMBER_OF_ROOT_DIRECTORY[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    for(size_t i=0;i<2;i++)Boot_Record.SECTOR_NUMBER_OF_THE_FSINFO_STRUCTURE[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    for(size_t i=0;i<2;i++)Boot_Record.SECTOR_NUMBER_OF_BACKUP_BOOT_SECTOR[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    for(size_t i=0;i<12;i++)Boot_Record.RESERVED0[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    for(size_t i=0;i<1;i++)Boot_Record.DRIVE_NUMBER[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    for(size_t i=0;i<1;i++)Boot_Record.WINDOWS_FLAGS[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    for(size_t i=0;i<1;i++)Boot_Record.SIGNATURE[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    for(size_t i=0;i<4;i++)Boot_Record.VOLUME_ID[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    for(size_t i=0;i<11;i++)Boot_Record.VOLUME_LABEL[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    for(size_t i=0;i<8;i++)Boot_Record.SYSTEM_IDENTIFIER[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    for(size_t i=0;i<420;i++)Boot_Record.BOOT_CODE[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    for(size_t i=0;i<2;i++)Boot_Record.BOOT_MAGIC[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);

                    CurrentByte=((uint16_t)*Boot_Record.SECTOR_NUMBER_OF_THE_FSINFO_STRUCTURE)*(*((uint16_t*)Boot_Record.NUMBER_OF_BYTES_PER_SECTOR));
                    for(size_t i=0;i<4;i++)FSINFO_Structure.LEAD_SIGNATURE[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    for(size_t i=0;i<480;i++)FSINFO_Structure.RESERVED0[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    for(size_t i=0;i<4;i++)FSINFO_Structure.ANOTHER_SIGNATURE[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    for(size_t i=0;i<4;i++)FSINFO_Structure.LAST_KNOWN_FREE_CLUSTER[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    for(size_t i=0;i<4;i++)FSINFO_Structure.START_SEARCHING_FOR_AVAILABLE_CLUSTERS_HERE[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    for(size_t i=0;i<12;i++)FSINFO_Structure.RESERVED1[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    for(size_t i=0;i<12;i++)FSINFO_Structure.TRAIL_SIGNATURE[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);

                    
                    
                    //CurrentByte=(*((uint32_t*)Boot_Record.CLUSTER_NUMBER_OF_ROOT_DIRECTORY))*(*((uint8_t*)Boot_Record.NUMBER_OF_SECTORS_PER_CLUSTER))*(*((uint16_t*)Boot_Record.NUMBER_OF_BYTES_PER_SECTOR));
                    //for(size_t i=0;i<8;i++)Root_DirectoryEntry.name[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    //for(size_t i=0;i<3;i++)Root_DirectoryEntry.ext[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    //for(size_t i=0;i<1;i++)Root_DirectoryEntry.attrib[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    //for(size_t i=0;i<1;i++)Root_DirectoryEntry.userattrib[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    //for(size_t i=0;i<1;i++)Root_DirectoryEntry.undelete[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    //for(size_t i=0;i<2;i++)Root_DirectoryEntry.createtime[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    //for(size_t i=0;i<2;i++)Root_DirectoryEntry.createdate[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    //for(size_t i=0;i<2;i++)Root_DirectoryEntry.accessdate[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    //for(size_t i=0;i<2;i++)Root_DirectoryEntry.clusterhigh[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    //for(size_t i=0;i<2;i++)Root_DirectoryEntry.modifiedtime[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    //for(size_t i=0;i<2;i++)Root_DirectoryEntry.modifieddate[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    //for(size_t i=0;i<2;i++)Root_DirectoryEntry.clusterlow[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                    //for(size_t i=0;i<4;i++)Root_DirectoryEntry.filesize[i]=Sauce::Global::AHCIDriver->Read(Port,CurrentByte++);
                }
                Sauce::string FAT32Driver_st::info_str(){
                    Sauce::string Result;
                    Result.AddLast((char*)"Boot_Record.NOP: ");
                    for(size_t i=0;i<3;i++)Result.AddLast(Sauce::Utility::HexToString(Boot_Record.NOP[i]));
                    Result.AddLast((char*)"\n\r");
                    Result.AddLast((char*)"Boot_Record.OEM_IDENTIFIER: ");
                    for(size_t i=0;i<8;i++)Result.AddLast(Sauce::Utility::HexToString(Boot_Record.OEM_IDENTIFIER[i]));
                    Result.AddLast((char*)"\n\r");
                    Result.AddLast((char*)"Boot_Record.NUMBER_OF_BYTES_PER_SECTOR: ");
                    Result.AddLast(Sauce::Utility::ToString( *((uint16_t*)Boot_Record.NUMBER_OF_BYTES_PER_SECTOR) ));
                    Result.AddLast((char*)"\n\r");
                    Result.AddLast((char*)"Boot_Record.NUMBER_OF_SECTORS_PER_CLUSTER: ");
                    Result.AddLast(Sauce::Utility::ToString( *((uint8_t*)Boot_Record.NUMBER_OF_SECTORS_PER_CLUSTER) ));
                    Result.AddLast((char*)"\n\r");
                    Result.AddLast((char*)"Boot_Record.NUMBER_OF_RESERVED_SECTORS: ");
                    Result.AddLast(Sauce::Utility::ToString( *((uint16_t*)Boot_Record.NUMBER_OF_RESERVED_SECTORS) ));
                    Result.AddLast((char*)"\n\r");
                    Result.AddLast((char*)"Boot_Record.NUMBER_OF_FATS: ");
                    Result.AddLast(Sauce::Utility::ToString( *((uint8_t*)Boot_Record.NUMBER_OF_FATS) ));
                    Result.AddLast((char*)"\n\r");
                    Result.AddLast((char*)"Boot_Record.NUMBER_OF_ROOT_DIRECTORY_ENTRIES: ");
                    Result.AddLast(Sauce::Utility::ToString( *((uint16_t*)Boot_Record.NUMBER_OF_ROOT_DIRECTORY_ENTRIES) ));
                    Result.AddLast((char*)"\n\r");
                    Result.AddLast((char*)"Boot_Record.TOTAL_SECTORS_IN_LOGICAL_VOLUME: ");
                    Result.AddLast(Sauce::Utility::ToString( *((uint16_t*)Boot_Record.TOTAL_SECTORS_IN_LOGICAL_VOLUME) ));
                    Result.AddLast((char*)"\n\r");
                    Result.AddLast((char*)"Boot_Record.MEDIA_DESCRIPTOR_TYPE: ");
                    Result.AddLast(Sauce::Utility::HexToString( *((uint8_t*)Boot_Record.MEDIA_DESCRIPTOR_TYPE) ));
                    Result.AddLast((char*)"\n\r");
                    Result.AddLast((char*)"Boot_Record.NUMBER_OF_SECTORS_PER_FAT_(12/16): ");
                    Result.AddLast(Sauce::Utility::ToString( *((uint16_t*)Boot_Record.NUMBER_OF_SECTORS_PER_FAT_12) ));
                    Result.AddLast((char*)"\n\r");
                    Result.AddLast((char*)"Boot_Record.NUMBER_OF_SECTORS_PER_TRACK: ");
                    Result.AddLast(Sauce::Utility::ToString( *((uint16_t*)Boot_Record.NUMBER_OF_SECTORS_PER_TRACK) ));
                    Result.AddLast((char*)"\n\r");
                    Result.AddLast((char*)"Boot_Record.NUMBER_OF_HEADS: ");
                    Result.AddLast(Sauce::Utility::ToString( *((uint16_t*)Boot_Record.NUMBER_OF_HEADS) ));
                    Result.AddLast((char*)"\n\r");
                    Result.AddLast((char*)"Boot_Record.NUMBER_OF_HIDDEN_SECTORS: ");
                    Result.AddLast(Sauce::Utility::ToString( *((uint32_t*)Boot_Record.NUMBER_OF_HIDDEN_SECTORS) ));
                    Result.AddLast((char*)"\n\r");
                    Result.AddLast((char*)"Boot_Record.LARGE_SECTOR_COUNT: ");
                    Result.AddLast(Sauce::Utility::ToString( *((uint32_t*)Boot_Record.LARGE_SECTOR_COUNT) ));
                    Result.AddLast((char*)"\n\r");
                    Result.AddLast((char*)"Boot_Record.NUMBER_OF_SECTORS_PER_FAT_32: ");
                    Result.AddLast(Sauce::Utility::ToString( *((uint32_t*)Boot_Record.NUMBER_OF_SECTORS_PER_FAT_32) ));
                    Result.AddLast((char*)"\n\r");
                    Result.AddLast((char*)"Boot_Record.FLAGS: ");
                    Result.AddLast(Sauce::Utility::HexToString( *((uint16_t*)Boot_Record.FLAGS) ));
                    Result.AddLast((char*)"\n\r");
                    Result.AddLast((char*)"Boot_Record.FAT_VERSION: ");
                    Result.AddLast(Sauce::Utility::HexToString( *((uint16_t*)Boot_Record.FAT_VERSION) ));
                    Result.AddLast((char*)"\n\r");
                    Result.AddLast((char*)"Boot_Record.CLUSTER_NUMBER_OF_ROOT_DIRECTORY: ");
                    Result.AddLast(Sauce::Utility::ToString( *((uint32_t*)Boot_Record.CLUSTER_NUMBER_OF_ROOT_DIRECTORY) ));
                    Result.AddLast((char*)"\n\r");
                    Result.AddLast((char*)"Boot_Record.SECTOR_NUMBER_OF_THE_FSINFO_STRUCTURE: ");
                    Result.AddLast(Sauce::Utility::ToString( *((uint16_t*)Boot_Record.SECTOR_NUMBER_OF_THE_FSINFO_STRUCTURE) ));
                    Result.AddLast((char*)"\n\r");
                    Result.AddLast((char*)"Boot_Record.SECTOR_NUMBER_OF_BACKUP_BOOT_SECTOR: ");
                    Result.AddLast(Sauce::Utility::ToString( *((uint16_t*)Boot_Record.SECTOR_NUMBER_OF_BACKUP_BOOT_SECTOR) ));
                    Result.AddLast((char*)"\n\r");
                    Result.AddLast((char*)"Boot_Record.DRIVE_NUMBER: ");
                    Result.AddLast(Sauce::Utility::HexToString( *((uint8_t*)Boot_Record.DRIVE_NUMBER) ));
                    Result.AddLast((char*)"\n\r");
                    Result.AddLast((char*)"Boot_Record.WINDOWS_FLAGS: ");
                    Result.AddLast(Sauce::Utility::HexToString( *((uint8_t*)Boot_Record.WINDOWS_FLAGS) ));
                    Result.AddLast((char*)"\n\r");
                    Result.AddLast((char*)"Boot_Record.SIGNATURE: ");
                    Result.AddLast(Sauce::Utility::HexToString( *((uint8_t*)Boot_Record.SIGNATURE) ));
                    Result.AddLast((char*)"\n\r");
                    Result.AddLast((char*)"Boot_Record.VOLUME_ID: ");
                    Result.AddLast(Sauce::Utility::HexToString( *((uint8_t*)Boot_Record.VOLUME_ID) ));
                    Result.AddLast((char*)"\n\r");
                    Result.AddLast((char*)"Boot_Record.VOLUME_LABEL: ");
                    for(size_t i=0;i<11;i++)Result.AddLast((char)Boot_Record.VOLUME_LABEL[i]);
                    Result.AddLast((char*)"\n\r");
                    Result.AddLast((char*)"Boot_Record.SYSTEM_IDENTIFIER: ");
                    Result.AddLast(Sauce::Utility::HexToString( *((uint64_t*)Boot_Record.SYSTEM_IDENTIFIER) ));
                    Result.AddLast((char*)"\n\r");
                    Result.AddLast((char*)"Boot_Record.BOOT_MAGIC: ");
                    Result.AddLast(Sauce::Utility::HexToString( *((uint16_t*)Boot_Record.BOOT_MAGIC) ));
                    Result.AddLast((char*)"\n\r");

                    //Result.AddLast((char*)"Root_DirectoryEntry.name: ");
                    //for(size_t i=0;i<8;i++)Result.AddLast((char)Root_DirectoryEntry.name[i]);
                    //Result.AddLast((char*)"\n\r");
                    //Result.AddLast((char*)"Root_DirectoryEntry.ext: ");
                    //for(size_t i=0;i<3;i++)Result.AddLast((char)Root_DirectoryEntry.ext[i]);
                    //Result.AddLast((char*)"\n\r");
                    //Result.AddLast((char*)"Root_DirectoryEntry.attrib: ");
                    //Result.AddLast(Sauce::Utility::HexToString( *((uint8_t*)Root_DirectoryEntry.attrib) ));
                    //Result.AddLast((char*)"\n\r");
                    //Result.AddLast((char*)"Root_DirectoryEntry.userattrib: ");
                    //Result.AddLast(Sauce::Utility::HexToString( *((uint8_t*)Root_DirectoryEntry.userattrib) ));
                    //Result.AddLast((char*)"\n\r");
                    //Result.AddLast((char*)"Root_DirectoryEntry.undelete: ");
                    //Result.AddLast(Sauce::Utility::HexToString( *((uint8_t*)Root_DirectoryEntry.undelete) ));
                    //Result.AddLast((char*)"\n\r");
                    //Result.AddLast((char*)"Root_DirectoryEntry.createtime: ");
                    //Result.AddLast(Sauce::Utility::ToString( *((uint16_t*)Root_DirectoryEntry.createtime) ));
                    //Result.AddLast((char*)"\n\r");
                    //Result.AddLast((char*)"Root_DirectoryEntry.createdate: ");
                    //Result.AddLast(Sauce::Utility::ToString( *((uint16_t*)Root_DirectoryEntry.createdate) ));
                    //Result.AddLast((char*)"\n\r");
                    //Result.AddLast((char*)"Root_DirectoryEntry.accessdate: ");
                    //Result.AddLast(Sauce::Utility::ToString( *((uint16_t*)Root_DirectoryEntry.accessdate) ));
                    //Result.AddLast((char*)"\n\r");
                    //Result.AddLast((char*)"Root_DirectoryEntry.clusterhigh: ");
                    //Result.AddLast(Sauce::Utility::HexToString( *((uint16_t*)Root_DirectoryEntry.accessdate) ));
                    //Result.AddLast((char*)"\n\r");
                    //Result.AddLast((char*)"Root_DirectoryEntry.modifiedtime: ");
                    //Result.AddLast(Sauce::Utility::ToString( *((uint16_t*)Root_DirectoryEntry.modifiedtime) ));
                    //Result.AddLast((char*)"\n\r");
                    //Result.AddLast((char*)"Root_DirectoryEntry.modifieddate: ");
                    //Result.AddLast(Sauce::Utility::ToString( *((uint16_t*)Root_DirectoryEntry.modifieddate) ));
                    //Result.AddLast((char*)"\n\r");
                    //Result.AddLast((char*)"Root_DirectoryEntry.clusterlow: ");
                    //Result.AddLast(Sauce::Utility::HexToString( *((uint16_t*)Root_DirectoryEntry.clusterlow) ));
                    //Result.AddLast((char*)"\n\r");
                    //Result.AddLast((char*)"Root_DirectoryEntry.filesize: ");
                    //Result.AddLast(Sauce::Utility::ToString( *((uint32_t*)Root_DirectoryEntry.filesize) ));
                    //Result.AddLast((char*)"\n\r");

                    return Result;
                }
            };
        };
    };
};